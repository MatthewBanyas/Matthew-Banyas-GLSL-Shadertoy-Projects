float sdf(vec2 p) {
    return sqrt(pow(p.x, 2.0) + pow(p.y, 2.0)) - 3.0;
}

// polar coordinates
// If you want to go a dist of r in a direction of theta,
// vec2(r * sin(theta), r * cos(theta))
float manySDF(vec2 p, float time) {
    float result = 10000.0;
    for (float theta = 1.0; theta < 6.28; theta += 6.28 / 8.0) {
        float r = 5.0 + 5.0 * cos(3.0 * theta + time);
        result = min(result, 
            sdf(p - vec2(r * 3.0 * cos(theta), r * 1.5 * sin(theta)))
        );
    }
    return result;
}

float sdBox(vec2 p, vec2 b) {
    vec2 d = abs(p)-b;
    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);
}

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    float scale = 5.0 + 2.0*sin(iTime);
    
    vec2 p = fragCoord - vec2(iResolution.x/2.0, iResolution.y/2.0);
    p *= 5.0/iResolution.y;
    p *= scale;
    
    float dist = sdBox(p, vec2(3.0, 3.0));
    
    float frac = fract(dist);
    float pfunc = pow(((pow((frac-0.5), 2.0))*4.0), 3.0);
    float iredfunc = -pfunc * pow(1.5, dist) * min(0.0, dist);
    float ibluefunc = pfunc * pow(0.675, dist) * max(0.0, dist);
    float bkgblue = (-ibluefunc + 1.0) * max(0.0,(dist/abs(dist)));
    float bkgred = (-iredfunc+ 1.0) * (min(0.0, sign(dist))*-1.0);
    float border = -min(10.0*abs(dist), 1.0) + 1.0;
    
    vec3 bkgBlue = vec3(0.3, 0.33, 0.5);
    vec3 bkgRed = vec3(0.5, 0.25, 0.2);
    vec3 red = vec3(0.9, 0.8, -0.3);
    vec3 blue = vec3(-0.3, 0.9, 1.1);
    float bkgFalloff = 60.0 / (60.0 + abs(dist));
    
    // linear combination of colors
    fragColor = vec4(
        (border + bkgFalloff) * (
            bkgBlue * bkgblue + bkgRed * bkgred
        ) + iredfunc * red + ibluefunc * blue,
        1.0
    );
}
