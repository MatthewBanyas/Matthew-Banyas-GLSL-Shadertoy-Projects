// GLSL: OpenGL Shading Language
// A shader is a program that assigns a color to a pixel.
// Basically, your GPU runs the shader for every little pixel in the image to the left
// every single frame. If you're thinking, "Wow, that's a lot of executions of this
// program"... you're right. It's a lot.
//
// GPUs are very very stupid. They can't really branch (every if statement and loop is
// actually faked cleverly...), they can't manipulate I/O or memory that isn't
// explicitly bound to them through a texture or whatever, they're really simple.
// But! They can do MATH!!!!
//
// So that gives us RAW!!! POWER!!!!!

// In Shadertoy, you get some special inputs that are accessible EVERYWHERE.
//   - iTime is a float (1-dimensional) that is the # of seconds since start.
//   - iResolution.xy is the # of pixels in the image (width, height)
//   - fragCoord is the pixel you are currently drawing

float PI = 3.14159;

// This function colors a pixel.
void mainImage(out vec4 fragColor, in vec2 fragCoord )
{
    // Normalized pixel coordinates (from 0 to 1)
    // Bottom-left is (0, 0);  top-right is (1, 1);  center is (0.5, 0.5)
    //vec2 uv = fragCoord/iResolution.xy;

    // Output to screen
    //fragColor = vec4(vec3(0.5 + 0.5 * sin(iTime)), 1.0);
    //fragColor = vec4(uv.yyy, 1.0);
    
    float scale = 5.0 + 5.0*sin(iTime);
    
    vec2 p = fragCoord - vec2(iResolution.x/2.0, iResolution.y/2.0);
    p *= 2.0/iResolution.y;
    p *= scale;
    
    float dist = length(p);
    float ang = atan(p.y, p.x); // -pi to pi
    float wobble = sin(ang*10.0+10.0*iTime); // -1 to 1, 10 cycles around circle
    float a = floor(dist*(1.0+0.2*wobble))/scale;
    float b = 0.5 + 0.5 * wobble;
    
    vec3 u = vec3(0.05, 0.07, 0.11);   // as a goes up, we move in the u direction
    vec3 v = vec3(-0.2, 0.1, 0.4);    // as b goes up, we move in the v direction
    vec3 c = vec3(0.3, 0.6, 0.1);
    fragColor = vec4(c + a * u + b * v, 1.0);
    fragColor.xyz = pow(fragColor.xyz, vec3(2.2));
    
    
    
    //p += 0.05 * vec2(sin(p.y * 10.0 + iTime), cos(p.x * 7.0 + iTime * 1.2));
    
    //float angle = iTime * 0.2;
    //p = vec2(
    //    sin(angle) * p.x + cos(angle) * p.y,
    //    cos(angle) * p.x - sin(angle) * p.y
    //);
    
    //fragColor = vec4(p - floor(p), 0.5, 1.0);
}
